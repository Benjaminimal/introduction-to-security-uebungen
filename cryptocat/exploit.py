#!/usr/bin/env python2
import sys
import re

from base64 import b64decode
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend
from pwn import pack, remote


def decrypt(data, key):
    """Decrypt data using the provided key."""

    cipher = Cipher(algorithms.AES(key), modes.ECB(), backend=default_backend())
    decryptor = cipher.decryptor()
    padded_data = decryptor.update(data) + decryptor.finalize()
    return padded_data


def chop(lst, size):
    return [ lst[i:i+size] for i in range(0, len(lst), size) ]


def execute_command(payload):
    tube = remote(HOST, PORT)
    tube.sendline(payload)
    return tube.recvall()


HOST = "cryptocat.wutctf.space"
PORT = 9999
CMDS = {
    'DIR': {
        'PATH': b'command_dir',
        'PLAIN': b'show_file_names',
        'CIPHER': b'',
    },
    'SND': {
        'PATH': b'command_snd',
        'PLAIN': b'send_encrypted#????????????????#flag',
        'CIPHER': b'',
    }
}

with open(CMDS['DIR']['PATH'], 'rb') as f:
     CMDS['DIR']['CIPHER'] = f.read()

with open(CMDS['SND']['PATH'], 'rb') as f:
     CMDS['SND']['CIPHER'] = f.read()

cmd = CMDS['DIR']
cipher = cmd['CIPHER']
# cipher = cmd['PLAIN']


def main():
    print(execute_command(CMDS['DIR']['CIPHER']))

    block_size = 16

    snd_blocks = chop(CMDS['SND']['CIPHER'], block_size)
    print(chop(CMDS['SND']['PLAIN'], block_size))
    print(snd_blocks)
    dir_blocks = chop(CMDS['DIR']['CIPHER'], block_size)
    print(chop(CMDS['DIR']['PLAIN'], block_size))
    print(dir_blocks)
    print

    payload = snd_blocks[0] + dir_blocks[0] + snd_blocks[2]
    response = execute_command(payload)
    print(response)

    lines = response.split('\n')
    b64_flag = lines[len(lines)-2]
    flag = b64decode(b64_flag)

    key = CMDS['DIR']['PLAIN']
    for c in range(1, 256):
        key_candidate = pack(c)[0] + key
        flag_candidate = decrypt(flag, key_candidate)
        if re.match(r'(\w+_)+\w+', flag_candidate):
            print(flag_candidate)
            print(len(flag_candidate))


if __name__ == '__main__':
    main()
